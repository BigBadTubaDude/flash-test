@import '~antd/dist/antd.css';

/*********Variables*/
:root {
  --panel-1-width: 50vw;
  --panel-2-width: 50vw;
  --bar-type-card-width: calc(var(--panel-1-width) / 3.8);
  --text-color: rgb(255,255,255);
  --card-text-color: rgb(245,245,245);
  --background-color:#282c34;
  --needs-attention-color: rgb(185, 1, 1);
  --card-background: rgb(60,60,60);
  --radio-background-panel2: rgb(170,170,170);
}

html, body {
  overflow: hidden;
}
#root  {
  text-align: center;
  background-color: var(--background-color);
  


}
.appContainer {
  display: grid;
  grid-template-columns: var(--panel-1-width) 1fr;
}
.Panel1 {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  width: var(--panel-1-width);
  justify-content: center;
  font-size: calc(10px + 2vmin);
}

/*****************Panel 1 header*/
.panel1Header {
  display: flex;
  flex-direction: row;
  width: 100%;
  justify-content: space-evenly;
  justify-items: stretch;
  align-items: stretch;
  height: 75px;
  font-size: calc(15px + 2vmin);
  color: var(--text-color);
}

/*Material toggle button and h1 display*/
.materialSelectSection {
  display:flex;
  flex-direction: column;
  width:4em;
  height: 2.5em;
  position: relative;
  align-items: center;
}
.materialSelectSection > h1 {/*Material label*/
  /* height: 26px; */
  width: 4em;
  margin-bottom: 2px;
  font-size: calc(8px + 2vmin);
  color: var(--text-color);
  
  
  /* content:" "; */
}
.materialRadio {
  position: absolute;
  bottom:0;
  left:0;
  right:0;
}
/*************BAR TYPE*/
h1.barTypeh1 { /*Bar type label*/
  width: 8.5em;
  font-size: calc(10px + 2vmin);
  color: var(--text-color);
  margin-left: 10px;
  
}
/******************DEFECT COUNT SECTION*/
.defectCountSection {
  display: flex;
  width: 200px;
  align-items: stretch;
  justify-content: space-between;
}
.defectCountSection > h3 {
  font-size: calc(5px + 2vmin);
  color: var(--text-color);
  width: 4em;
}
.currentDefectCountInput { 
  width: 45px;
  height: 40px;
  color:black;
  text-align: center;
  margin-right: 9px;
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {/*Hides the arrow buttons on number of defects number text input box*/
  display: none;
}
.rackPositionRadioButtons {
  font-size: .5em;
  line-height: 1.4;
  align-self: end;
  width:25px;
}

.rackPositionRadioButtons > label {
  padding-left: 2.5px;
  cursor: pointer;
}

.rackPositionSection {
  display:flex;
  position: relative;
}
button.rackResetButton{
  position: absolute;
  bottom: 0;
  right: 0;
  background-color: var(--card-background);
  border-color: var(--text-color);
  transform: translate(20%, 0);
  width: 6em;
}

button.rackResetButton > span {
  font-size: 1em;
  color: var(--text-color);
  text-align: center;
  position: absolute;
  inset: 0;
}
/*These effects make clear that Reset is clickable while Unknown is not*/
button.rackResetButton:hover {
  background-color: rgb(70,70,70);
  border-color: rgb(255,255,255);
  /* filter: opacity(1.6) */
}
button.rackResetButton:active {
  background-color: rgb(55,55,55);
  border-color: rgb(240,240,240);  
}
button.rackResetButton:focus {
  background-color: var(--card-background);
  border-color: var(--text-color);
}
/* Keeps Unknown label from acting like a clickable button when hovered over*/
button.noHighlight:hover { 
  background-color: var(--card-background);
  border-color: var(--text-color);
  /* cursor: default; */
}
button.noHighlight:focus { 
  background-color: var(--card-background);
  border-color: var(--text-color);
  /* cursor: default; */
}
.rackPositionSection > h3 {
  font-size: calc(3px + 2vmin);
  color: var(--text-color);
  width: 5em;
  text-align: left;
  padding-left: 10px;
}



/******************BAR TYPE CARD CONTAINER*/
.barTypeCardContainer {
  display: grid;
  gap: 1.5rem;
  /* grid-template-columns: var(--bar-type-card-width) var(--bar-type-card-width) var(--bar-type-card-width); */
  grid-template-columns: repeat(6, 1fr);
  justify-content: center;
}
.barTypeCardContainer > * {
  height: 2.5em;
  background-color: var(--card-background);
  width: var(--bar-type-card-width);
  display: grid;
  grid-template-columns: 50% 50%;
  grid-template-rows: 65% 35%;
  margin-top: 20px;
}
.barTypeCard {
  grid-column: span 2;
  cursor: pointer;
  
}


.barTypeCard > h1 {
  color: var(--card-text-color);
}
.barTypeCard:nth-last-child(2):nth-child(3n + 1) {/*Second to last item if there are two widows*/
  grid-column-end: 4;
}
.barTypeCard:last-child:nth-child(3n - 1) { /*last item if there are 2 widows*/
  grid-column-end: -2;
}
.barTypeCard:last-child:nth-child(3n - 2) { /*last item if one widow*/
  grid-column-end:  5;
}
/**********************SUBMIT BUTTON*/
button.submitHidden { /*Submit button when fields are not filled out*/
  visibility: hidden;
}
button.submitShow {
  visibility: visible;
  
}
.submitButton {
  position:absolute;
  bottom: 7%;
  background-color: var(--card-text-color);
  color: var(--background-color);
  font-weight: 400;
  border-radius: 5px;
  width: 6em;
  cursor: pointer;
}
.submitButton:hover {
  filter:brightness(1.1)
}
.submitButton:active {
  background-color: rgb(200,200,210); 
}


/***********************Spreads last items ofbar type cards if not a multiple of 3  */


/******************Panel 2*/
.Panel2 {
  max-height: 90vh;
  /* overflow-y: auto; */
  overflow: overlay;
  margin: 40px;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  grid-column-start: 2;
  
}


li.DefectItem { /*Each list item container (one for every defect)*/
  display: grid;
  grid-template-areas:
  'head head head head orientation  orientation'
  'loc loc loc loc loc loc';  
  list-style: none;
  padding-bottom: 35px;
  margin-top: 35px;
  border-bottom: 1px solid grey;
  align-items: center;
  margin-right: 30px;
}
/******************* Defect Number and defect type drop down*/
div.defectNumTypeContainer { /* Defect number and type drop down container*/
  display: flex;
  grid-area: head;
  justify-content: space-evenly;
}

div.defectNumTypeContainer > h2{ /*Defect number label for each defect item*/
  color: white;
  justify-self: center;
  margin: 0;
  cursor: default;
}
div.defectNumTypeContainer > select { /*dropdown select box*/
  height: 30px;
  width: 10em;
  font-size: .75em;
  justify-self: center;
  align-self: center;
}

/*****************************Location radio buttons */
form.locationRadioButtons { /*Location radio buttons CONTAINER*/
  width: 94%;
  grid-area: loc;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  background-color: var(--radio-background-panel2);
  border-radius: 70px;
  justify-self: center;
}

form.locationRadioButtons > div label { /*Individual location radio button labels*/
  margin-left: 10px;
  cursor: pointer;
}

/******************************* Orientation toggle*/

li.DefectItem > button.ant-switch { /*Top Bottom toggle button*/
  grid-area: orientation;
  width: 3.5em;
  /* height: 2em; */
  font-size: .8em;
}

li.DefectItem div.ant-switch-handle::before { /*toggle dot when Bottom is selected*/
  background-color: var(--radio-background-panel2)
  
} 
li.DefectItem > .ant-switch {
  background-color: var(--card-background);
}
li.DefectItem > .ant-switch-checked > div.ant-switch-handle::before { /*toggle dot when Top is selected*/
  background-color: var(--background-color)
}
li.DefectItem > .ant-switch-checked {
  background-color: var(--radio-background-panel2)
}
li.DefectItem > .ant-switch-checked > .ant-switch-inner{ /*Toggle text when Top is selected*/
  color: black;
}

/****************************************scroll bar styling*/
::-webkit-scrollbar-track {/* Track */
  background: var(--background-color);  
  
}
::-webkit-scrollbar {/* width */
  width: 8px;
  
}
::-webkit-scrollbar-thumb {/* Handle */
  background: var(--card-background);
  border-radius: 7px;
}
::-webkit-scrollbar-thumb:hover {/* Handle on hover */
  background: #555; 
}
@media only screen and (max-width: 1250px) {
  .appContainer {
    display: flex;
    flex-direction: column;
  }
  html, body {
    overflow:visible;
  }
  .Panel1 {
    width: 90vw;
    padding:15px;
    align-items: stretch;
    align-self: center;
  }
  .barTypeCard {
    width: auto;
  }
  .barTypeCard:nth-last-child(2):nth-child(3n + 1) {/*Second to last item if there are two widows*/
    grid-column-end: 4;
  }
  .barTypeCard:last-child:nth-child(3n - 1) { /*last item if there are 2 widows*/
    grid-column-end: -2;
  }
  .barTypeCard:last-child:nth-child(3n - 2) { /*last item if one widow*/
    grid-column-end:  5;
  }
}